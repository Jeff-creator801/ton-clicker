// =====================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø FIREBASE
// =====================
// –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø –ù–ê –í–ê–®–ò –ò–ó FIREBASE CONSOLE
const firebaseConfig = {
  apiKey: "AIzaSyA2mxa0BR-V7FtqCFxkXtSoOTGUFXbI4M4",
¬† authDomain: "gammaton-fdbfd.firebaseapp.com",
¬† databaseURL: "https://gammaton-fdbfd-default-rtdb.firebaseio.com",
¬† projectId: "gammaton-fdbfd",
¬† storageBucket: "gammaton-fdbfd.firebasestorage.app",
¬† messagingSenderId: "118045498245",
¬† appId: "1:118045498245:web:f09ac245c00b2040c1c2ec"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = firebase.initializeApp(firebaseConfig);
const db = firebase.firestore(app);

// =====================
// –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
// =====================
const YOUR_WALLET = "UQAmTM_EE8D6seecLKf-h8aXVQasliniDDQ52EvBj7PqExNr"; // –í–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
const CRYSTAL_TO_TON_RATE = 100000; // 1 TON = 100 000 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
const SHIP_PRICE = 0.5; // –¶–µ–Ω–∞ NFT –∫–æ—Ä–∞–±–ª—è –≤ TON

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON Connect
const connector = new TonConnectSDK.TonConnect({
  manifestUrl: 'https://Jeff-creator801.github.io/ton-clicker/tonconnect-manifest.json'
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

// =====================
// –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´
// =====================
let gameState = {
  crystals: 0,
  upgrades: {
    pickaxe: { level: 1, cost: 10, bonus: 0.5 },
    robot: { level: 0, cost: 50, bonus: 2 },
    factory: { level: 0, cost: 200, bonus: 10 }
  },
  ships: [],
  walletAddress: '',
  username: tg.initDataUnsafe.user?.username || '–ì–æ—Å—Ç—å'
};

// =====================
// –≠–õ–ï–ú–ï–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê
// =====================
const clickBtn = document.getElementById('click-btn');
const connectBtn = document.getElementById('connect-wallet');
const withdrawBtn = document.getElementById('withdraw-btn');
const buyShipBtn = document.getElementById('buy-ship-btn');
const crystalsDisplay = document.getElementById('crystals');
const walletInfo = document.getElementById('wallet-info');
const upgradesContainer = document.getElementById('upgrades-container');
const shipsContainer = document.getElementById('ships-container');
const notification = document.getElementById('notification');

// =====================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =====================

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, isSuccess = true) {
  notification.textContent = message;
  notification.style.display = 'block';
  notification.style.background = isSuccess ? '#10b981' : '#ef4444';
  
  setTimeout(() => {
    notification.style.display = 'none';
  }, 3000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏–∑ Firebase
async function loadGameState() {
  try {
    const userId = tg.initDataUnsafe.user.id;
    const doc = await db.collection('users').doc(userId).get();
    
    if (doc.exists) {
      gameState = doc.data();
      updateUI();
      showNotification('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
    showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', false);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ Firebase
async function saveGameState() {
  try {
    const userId = tg.initDataUnsafe.user.id;
    await db.collection('users').doc(userId).set(gameState);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
  crystalsDisplay.textContent = gameState.crystals.toLocaleString();
  
  // –ö–æ—à–µ–ª–µ–∫
  if (gameState.walletAddress) {
    const shortAddress = `${gameState.walletAddress.slice(0, 6)}...${gameState.walletAddress.slice(-4)}`;
    walletInfo.textContent = `TON –∫–æ—à–µ–ª–µ–∫: ${shortAddress}`;
  }
  
  // –£–ª—É—á—à–µ–Ω–∏—è
  upgradesContainer.innerHTML = '';
  for (const [id, upgrade] of Object.entries(gameState.upgrades)) {
    const div = document.createElement('div');
    div.className = 'upgrade';
    div.innerHTML = `
      <div class="upgrade-info">
        <div class="upgrade-name">${getUpgradeName(id)}</div>
        <div class="upgrade-stats">–£—Ä–æ–≤–µ–Ω—å: ${upgrade.level} | –ë–æ–Ω—É—Å: +${upgrade.bonus}/–∫–ª–∏–∫</div>
      </div>
      <button class="btn upgrade-btn" data-id="${id}">${upgrade.cost} –∫—Ä–∏—Å—Ç.</button>
    `;
    upgradesContainer.appendChild(div);
  }
  
  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π
  document.querySelectorAll('.upgrade-btn').forEach(btn => {
    btn.addEventListener('click', () => upgrade(btn.dataset.id));
  });
  
  // –ö–æ—Ä–∞–±–ª–∏
  shipsContainer.innerHTML = '';
  if (gameState.ships.length === 0) {
    shipsContainer.innerHTML = '<div style="text-align:center; padding:10px;">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ä–∞–±–ª–µ–π</div>';
  } else {
    gameState.ships.forEach((ship, index) => {
      const shipCard = document.createElement('div');
      shipCard.className = 'ship-card';
      shipCard.innerHTML = `
        <div class="ship-name">${ship.name}</div>
        <div class="ship-stats">
          <div class="stat bonus">–ë–æ–Ω—É—Å: ${ship.bonus.toFixed(1)}x</div>
          <div class="stat power">–°–∏–ª–∞: ${ship.power}‚ö°</div>
        </div>
        <button class="btn btn-secondary attack-btn" data-index="${index}" style="margin-top:10px;">–ê—Ç–∞–∫–æ–≤–∞—Ç—å (10 –∫—Ä–∏—Å—Ç.)</button>
      `;
      shipsContainer.appendChild(shipCard);
    });
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞—Ç–∞–∫
    document.querySelectorAll('.attack-btn').forEach(btn => {
      btn.addEventListener('click', () => attack(btn.dataset.index));
    });
  }
}

// –ù–∞–∑–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
function getUpgradeName(id) {
  const names = {
    pickaxe: '‚öíÔ∏è –ë–∞–∑–æ–≤–∞—è –∫–∏—Ä–∫–∞',
    robot: 'ü§ñ –î–æ–±—ã–≤–∞—é—â–∏–π —Ä–æ–±–æ—Ç',
    factory: 'üè≠ –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞'
  };
  return names[id] || id;
}

// –†–∞—Å—á–µ—Ç –¥–æ–±—ã—á–∏ –∑–∞ –∫–ª–∏–∫
function calculateCrystalsPerClick() {
  let crystals = 1;
  
  // –ë–æ–Ω—É—Å –æ—Ç —É–ª—É—á—à–µ–Ω–∏–π
  for (const upgrade of Object.values(gameState.upgrades)) {
    crystals += upgrade.level * upgrade.bonus;
  }
  
  // –ë–æ–Ω—É—Å –æ—Ç –∫–æ—Ä–∞–±–ª–µ–π
  let shipBonus = 1;
  gameState.ships.forEach(ship => {
    shipBonus += ship.bonus;
  });
  
  return crystals * shipBonus;
}

// =====================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ì–†–´
// =====================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
clickBtn.addEventListener('click', () => {
  const crystalsGained = calculateCrystalsPerClick();
  gameState.crystals += crystalsGained;
  
  // –í–∏–±—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
  if (navigator.vibrate) navigator.vibrate(50);
  
  saveGameState();
  updateUI();
  showNotification(`+${crystalsGained.toFixed(1)} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!`);
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–∞
connectBtn.addEventListener('click', async () => {
  try {
    const wallets = await connector.getWallets();
    const wallet = wallets.find(w => w.name.includes('Tonkeeper')) || wallets[0];
    
    if (!wallet) {
      showNotification('TON –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', false);
      return;
    }
    
    connector.connect({
      universalLink: wallet.universalLink,
      bridgeUrl: wallet.bridgeUrl
    });
    
    connector.onStatusChange(walletInfo => {
      if (walletInfo) {
        gameState.walletAddress = walletInfo.account.address;
        saveGameState();
        updateUI();
        showNotification('–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
      }
    });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', e);
    showNotification('–û—à–∏–±–∫–∞: ' + e.message, false);
  }
});

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function upgrade(id) {
  const upgrade = gameState.upgrades[id];
  
  if (gameState.crystals >= upgrade.cost) {
    gameState.crystals -= upgrade.cost;
    upgrade.level++;
    upgrade.cost = Math.floor(upgrade.cost * 1.5);
    
    saveGameState();
    updateUI();
    showNotification(`–£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ! –£—Ä–æ–≤–µ–Ω—å: ${upgrade.level}`);
  } else {
    showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!', false);
  }
}

// –ü–æ–∫—É–ø–∫–∞ NFT –∫–æ—Ä–∞–±–ª—è
buyShipBtn.addEventListener('click', async () => {
  if (!gameState.walletAddress) {
    showNotification('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!', false);
    return;
  }
  
  try {
    const transaction = {
      messages: [
        {
          address: YOUR_WALLET,
          amount: String(SHIP_PRICE * 1000000000) // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã
        }
      ],
      validUntil: Math.floor(Date.now() / 1000) + 300 // 5 –º–∏–Ω—É—Ç
    };
    
    const result = await connector.sendTransaction(transaction);
    
    if (result) {
      const shipTypes = [
        "–î—Ä–∞–∫–æ–Ω –¢—å–º—ã", "–°—Ç—Ä–∞–∂ –°–≤–µ—Ç–∞", "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –†–µ–π–¥–µ—Ä", 
        "–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å", "–ó–≤–µ–∑–¥–Ω—ã–π –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å"
      ];
      const randomType = shipTypes[Math.floor(Math.random() * shipTypes.length)];
      
      const newShip = {
        name: `${randomType} #${gameState.ships.length + 1}`,
        power: Math.floor(Math.random() * 50) + 50,
        bonus: parseFloat((Math.random() * 0.8 + 0.3).toFixed(1)) // 0.3-1.1x
      };
      
      gameState.ships.push(newShip);
      saveGameState();
      updateUI();
      showNotification(`–ö–æ—Ä–∞–±–ª—å "${newShip.name}" –∫—É–ø–ª–µ–Ω! –ë–æ–Ω—É—Å: ${newShip.bonus}x`);
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', e);
    showNotification('–û—à–∏–±–∫–∞: ' + (e.message || "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"), false);
  }
});

// PvP –∞—Ç–∞–∫–∞
async function attack(shipIndex) {
  if (gameState.crystals < 10) {
    showNotification('–ù—É–∂–Ω–æ 10 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏!', false);
    return;
  }
  
  gameState.crystals -= 10;
  saveGameState();
  updateUI();
  
  try {
    // –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    const usersSnapshot = await db.collection('users').get();
    const opponents = [];
    
    usersSnapshot.forEach(doc => {
      if (doc.id !== tg.initDataUnsafe.user.id && 
          doc.data().ships?.length > 0 &&
          doc.data().walletAddress) {
        opponents.push({ id: doc.id, ...doc.data() });
      }
    });
    
    if (opponents.length === 0) {
      gameState.crystals += 10;
      saveGameState();
      updateUI();
      showNotification('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤!', false);
      return;
    }
    
    const opponent = opponents[Math.floor(Math.random() * opponents.length)];
    const playerShip = gameState.ships[shipIndex];
    const opponentShip = opponent.ships[Math.floor(Math.random() * opponent.ships.length)];
    
    // –†–∞—Å—á–µ—Ç –±–æ—è
    const playerPower = playerShip.power * (0.8 + Math.random() * 0.4);
    const opponentPower = opponentShip.power * (0.8 + Math.random() * 0.4);
    
    if (playerPower > opponentPower) {
      const winnings = Math.floor(opponentPower / 5);
      gameState.crystals += winnings;
      saveGameState();
      updateUI();
      showNotification(`–ü–æ–±–µ–¥–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${winnings} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤`);
    } else {
      showNotification(`–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ ${opponentShip.name}`, false);
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∞—Ç–∞–∫–∏:', e);
    showNotification('–û—à–∏–±–∫–∞ PvP –±–æ—è', false);
    gameState.crystals += 10;
    saveGameState();
    updateUI();
  }
}

// –í—ã–≤–æ–¥ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –≤ TON
withdrawBtn.addEventListener('click', async () => {
  if (!gameState.walletAddress) {
    showNotification('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!', false);
    return;
  }
  
  const minWithdraw = 1000;
  if (gameState.crystals < minWithdraw) {
    showNotification(`–ú–∏–Ω–∏–º—É–º ${minWithdraw} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞`, false);
    return;
  }
  
  const tonAmount = gameState.crystals / CRYSTAL_TO_TON_RATE;
  const transactionAmount = tonAmount * 0.9; // 10% –∫–æ–º–∏—Å—Å–∏—è
  
  try {
    const transaction = {
      messages: [
        {
          address: gameState.walletAddress,
          amount: String(transactionAmount * 1000000000) // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã
        }
      ],
      validUntil: Math.floor(Date.now() / 1000) + 300 // 5 –º–∏–Ω—É—Ç
    };
    
    await connector.sendTransaction(transaction);
    
    // –°–±–æ—Å –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    gameState.crystals = 0;
    saveGameState();
    updateUI();
    showNotification(`–£—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ ${transactionAmount.toFixed(4)} TON!`);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', e);
    showNotification('–û—à–∏–±–∫–∞: ' + (e.message || "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"), false);
  }
});

// =====================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´
// =====================
tg.ready();
loadGameState();

// –ê–≤—Ç–æ-–¥–æ–±—ã—á–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ)
setInterval(() => {
  if (document.visibilityState === 'visible') {
    const crystalsGained = calculateCrystalsPerClick() * 2; // –ë–æ–Ω—É—Å –∑–∞ –∞–≤—Ç–æ-–¥–æ–±—ã—á—É
    gameState.crystals += crystalsGained;
    saveGameState();
    updateUI();
  }
}, 10000); // 10 —Å–µ–∫—É–Ω–¥
